TPS 1
1. A cache is a high-speed data storage layer which stores a subset of data
    ,so that future requests for that data are served up faster than is possible by accessing the data's primary storage location
    
    A cache primary purpose is to increase data retrieval performance by reducing the need to access the underlying slow storage layer

2. 
3.

4. 
    Since there is 16 bytes cache size, the offset field must contain 4 bits (2^4) = 16 -> log2(block_size) = num_offset_bits

    offset field must contain 4 bits 
    Words are generally 1 bytes so you would need more to clasify each block and store the data.

5. Need 6 index bits do fullfil 64 blocks in a cache
        log2(num_blocks) = num_index_bits


6. if you know the number of blocks = index and the size of each block. You would know the size of the cache as a whole
    since it is just a hash table. 
    num_blocks * size_of_block = size_of_cache


7. We need the rest for the tag part as there are multiple blocks in memory coinciding with the same blocks.
    It is to tell if the block in memory is the same as what is in the cache

    The left over will be tag and it will differentiate the diff. address that coincide with the same block

8. 
    a. 2^20 unique addresses
    b. 8 B (bytes) of block size -> 2^3 = 8 therefore needs 3 bits of offset
    c. 128B / 8 B = 16 number of blocks or 2^7/2^3 

    d. Number of bits for index is 2^4 = 16 therefore needs 4 bits for index
        address bits = tag + index + offset
    e. tag bits is that memory address is 20 bits therefore 20-3-4 = 13 bits left for tag
    f. draw
    g. same as above but with dirty bit meaning just 1 bit just like valid bit. Tag being the same and the data block is most likely going to be 1 word or 32 bits
        tag is 13 bits + 8bytes
    13+1+1+(8*8)=79 bits

TPS 2

log2(block_size) = num_offset_bits
each set = N blocks
log2(sets) = num_index_bits 
num_blocks * size_of_block = size_of_cache 
address bits = tag + index + offset
#sets = num_blocks/N

each sets = N blocks
log2(sets) = num_index_bits

log2(block_size) = num_offset_bits
each set = N blocks
log2(sets) = num_index_bits 
num_blocks * size_of_block = size_of_cache 
#sets = num_blocks/N

address bits = tag + index + offset

#bits per row = tag + v + b +#bits ind block


1. Multiple hits can occur multiple times and then having to access the main memory multiple times giving more runtime

Direct mapped caches have only one block in each set, so two 
addresses that map to the same set always cause a conflict.



2. 
3. We need 10 bits as 2^10 = 1024
    It will have 4 sets for 1 blocks
    or 1024 / 4 = 256 -> 2^8 = 256 -> needs 8 bits

    2^10 for 1024 blocks in a associativity is 4

4.  a. same as before 2^20
        2^20 unique addresses

    b. 2^3 = 8 therefore it is 3 bits of offset needed 
        log2(block_size) = num_offset_bits

    c. 128/8 = 16 blocks -> num_blocks * size_of_block = size_of_cache 
    
    
    d. 2 way cache-> 8 + 8 =16 of bytes 
        128 byte in all cache therefore 128/16 = 8 sets
        2^3 = 8 for index therefore 3 bits -> log2(sets) = num_index_bits 
    
       


    e. 20 - 3 - 3 = 14 bits for tag   

    f. valid and dirty will double of the direct mapped in cache memory
        data blocks will double aswell since there are 2 sets for every index
        indicating which one was changed last etc.

    g.  14+1+1+(8*8)=80 bits

    